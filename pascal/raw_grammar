1.	llprogramrr =>  llprogram_headingrr ";" llprogram_blockrr,
2.	llprogram_headingrr => "program" llidentifierrr ("(" O( llprogram_parametersrr) ")"),
3.	llprogram_blockrr =>  llblockrr ".",
4.	llblockrr =>  lllabel_declarationsrr llconstant_definitionsrr lltype_definitionsrr llvariable_declarationsrr llprocedure_function_declarationsrr llstatement_partrr,
5.	llprogram_parametersrr =>  llidentifier_listrr,
6.	lllabel_declarationsrr =>  O("label" lllabel_listrr ";" ),
7.	lllabelrr =>  lldigit_sequencerr,
8.	lllabel_listrr => lllabel_listrr“,”lllabelrr|lllabelrr,
9.	llconstant_definitionsrr =>  O("const" llconstant_definition_sequencerr ";"),
10.	llconstant_definitionrr =>  llidentifierrr "=" llconstantrr,
11.	llconstant_definition_sequencerr => llconstant_definition_sequencerr";" llconstant_definitionrr|llconstant_definitionrr,
12.	lltype_definitionsrr =>  O("type" lltype_definitionrr ";" #(lltype_definitionrr ";") ),
13.	lltype_definitionrr =>  llidentifierrr "=" lltype_denoterrr,
14.	llvariable_declarationsrr =>  O("var" llvariable_declarationrr ";" #(llvariable_declarationrr ";") ),
15.	llvariable_declarationrr =>  llidentifier_listrr ":" lltype_denoterrr,
16.	llprocedure_function_declarationsrr =>  #( llprocedure_declarationrr | llfunction_declarationrr ) ";",
17.	llidentifier_listrr => llidentifier_listrr“,”llidentifierrr|llidentifierrr,
18.	llsubprogram_declarationrr =>  llprocedure_declarationrr | llfunction_declarationrr,
19.	llprocedure_declarationrr =>  llprocedure_headingrr ";" lldirectiverr | llprocedure_identificationrr ";" llprocedure_blockrr | llprocedure_headingrr ";" llprocedure_blockrr,
20.	llprocedure_headingrr =>  "procedure" llidentifierrr O(llformal_parameter_listrr),
21.	llprocedure_identificationrr =>  "procedure" llprocedure_identifierrr,
22.	llprocedure_blockrr =>  llblockrr,
23.	llprocedure_identifierrr =>  llidentifierrr,
24.	lldirectiverr =>  llletterrr #(llletterrr | lldigitrr),
25.	lltype_denoterrr =>  lltype_identifierrr | llnew_typerr,
26.	llfunction_declarationrr =>  llfunction_headingrr ";" lldirectiverr | llfunction_identificationrr ";" llfunction_blockrr | llfunction_headingrr ";" llfunction_blockrr,
27.	llfunction_headingrr =>  "function" llidentifierrr (llformal_parameter_listrr ) ":" llresult_typerr,
28.	llfunction_blockrr =>  llblockrr,
29.	llformal_parameter_listrr =>  llformal_parameter_sectionrr #( ";" llformal_parameter_sectionrr),
30.	llformal_parameter_sectionrr =>  llvalue_parameter_specificationrr | llvariable_parameter_specificationrr | llprocedural_parameter_specificationrr | llfunctional_parameter_specificationrr | llconformant_array_parameter_specificationrr,
31.	llvalue_parameter_specificationrr =>  llidentifier_listrr ":" lltype_identifierrr,
32.	llvariable_parameter_specificationrr =>  "var" llidentifier_listrr ":" lltype_identifierrr,
33.	llprocedural_parameter_specificationrr =>  llprocedure_headingrr,
34.	llfunctional_parameter_specificationrr =>  llfunction_headingrr,
35.	llconformant_array_parameter_specificationrr =>  llvalue_conformant_array_specificationrr | llvariable_conformant_array_specificationrr,
36.	llvalue_conformant_array_specificationrr =>  llidentifier_listrr ":" llconformant_array_schemarr,
37.	llvariable_conformant_array_specificationrr =>  "var" llidentifier_listrr ":" llconformant_array_schemarr,
38.	llconformant_array_schemarr =>  llpacked_conformant_array_schemarr | llunpacked_conformant_array_schemarr,
39.	llpacked_conformant_array_schemarr =>  "packed" "array" O(llindex_type_specificationrr ) "of" lltype_identifierrr,
40.	llunpacked_conformant_array_schemarr =>  "array" O(llindex_type_specificationrr #(";" llindex_type_specificationrr) ) "of" lltype_identifierrr | llconformant_array_schemarr,
41.	llindex_type_specficationrr =>  llidentifierrr ".." llidentifierrr ":" llordinal_type_identifierrr,
42.	llconstantrr =>  llsigned_numberrr | llconstant_identifierrr | llcharacter_stringrr,
43.	llunsigned_constantrr =>  llunsigned_numberrr|llcharacter_stringrr|llconstant_identifierrr|"nil",
44.	llsigned_numberrr =>  llsigned_integerrr | llsigned_realrr,
45.	llunsigned_numberrr =>  llunsigned_integerrr | llunsigned_realrr,
46.	llconstant_identifierrr =>  llidentifierrr,
47.	lltype_identifierrr =>  llidentifierrr,
48.	llnew_typerr =>  llnew_ordinal_typerr | llnew_structured_typerr | llnew_pointer_typerr,
49.	llresult_typerr =>  llsimple_type_identifierrr | llpointer_type_identifierrr,
50.	llnew_ordinal_typerr =>  llenumerated_typerr | llsubrange_typerr,
51.	llnew_structured_typerr =>  O("packed") llunpacked_structured_typerr,
52.	llnew_pointer_typerr =>  "^" lldomain_typerr,
53.	llsimple_type_identifierrr =>  lltype_identifierrr,
54.	llpointer_type_identifierrr =>  lltype_identifierrr,
55.	llenumerated_typerr =>  llidentifier_listrr,
56.	llsubrange_typerr =>  llconstantrr ".." llconstantrr,
57.	llunpacked_structured_typerr =>  llarray_typerr | llrecord_typerr | llset_typerr | llfile_typerr,
58.	lldomain_typerr =>  lltype_identifierrr,
59.	llarray_typerr =>  "array" #(llindex_typerr #("," llindex_typerr) ) "of" llcomponent_typerr,
60.	llset_typerr =>  "set of" llbase_typerr,
61.	llfile_typerr =>  "file of" llcomponent_typerr,
62.	llindex_typerr =>  llordinal_typerr,
63.	llcomponent_typerr =>  lltype_denoterrr,
64.	llbase_typerr =>  llordinal_typerr,
65.	llordinal_typerr =>  llnew_ordinal_typerr | llordinal_type_identifierrr,
66.	llordinal_type_identifierrr =>  lltype_identifierrr,
67.	llrecord_typerr =>  "record" llfield_listrr "end",
68.	llrecord_sectionrr =>  llidentifier_listrr ":" lltype_denoterrr,
69.	llfield_listrr =>  O(llfixed_partrr #( ";" llvariant_partrr ) ,
70.	llfixed_partrr =>  llrecord_sectionrr #( ";" llrecord_sectionrr),
71.	llvariant_partrr =>  "case" llvariant_selectorrr "of" llvariantrr #( ";" llvariantrr),
72.	llvariant_selectorrr =>  O(lltag_fieldrr ":" ) lltag_typerr,
73.	llvariantrr =>  llcase_constant_listrr ":" llfield_listrr,
74.	lltag_fieldrr =>  llidentifierrr,
75.	lltag_typerr =>  llordinal_type_identifierrr,
76.	llcase_constant_listrr =>  llcase_constantrr #( "," llcase_constantrr),
77.	llcase_constantrr =>  llconstantrr,
78.	llprocedure_statementrr =>  llprocedure_identifierrr O(llactual_parameter_listrr ) | llio_procedure_statementrr,
79.	llio_procedure_statementrr =>  "read" llread_parameter_listrr | "readln" llreadln_parameter_listrr | "write" llwrite_parameter_listrr | "writeln" llwriteln_parameter_listrr,
80.	llactual_parameter_listrr =>  llactual_parameterrr #( "," llactual_parameterrr),
81.	lloptional_filerr => O(llfile_variablerr ","),
82.	llread_parameter_listrr =>  lloptional_filerr llvariable_accessrr #( "," llvariable_accessrr),
83.	llreadln_parameter_listrr =>  O(lloptional_filerr llvariable_accessrr #( "," llvariable_accessrr) ),
84.	llwrite_parameter_listrr =>  lloptional_filerr llwrite_parameterrr #( "," llwrite_parameterrr),
85.	llwriteln_parameter_listrr =>  O(lloptional_filerr llwrite_parameterrr #( "," llwrite_parameterrr) ),
86.	llactual_parameterrr =>  llexpressionrr | llvariable_accessrr | llprocedure_identifierrr | llfunction_identifierrr,
87.	llfile_variablerr =>  llvariable_accessrr,
88.	llvariable_accessrr =>  llentire_variablerr | llcomponent_variablerr | llidentified_variablerr | llbuffer_variblerr,
89.	llwrite_parameterrr =>  llexpressionrr O( ":" O(":"llexpressionrr ) ),
90.	llstatement_partrr =>  llcompound_statementrr,
91.	llcompound_statementrr =>  "begin" llstatement_sequencerr "end",
92.	llstatement_sequencerr =>  llstatementrr #(";" llstatementrr),
93.	llstatementrr =>  O(lllabelrr ":" ) (llsimple_statementrr | llstructured_statementrr),
94.	llsimple_statementrr =>  llempty_statementrr | llassignment_statementrr | llprocedure_statementrr | llgoto_statementrr,
95.	llstructured_statementrr =>  llcompound_statementrr | llconditional_statementrr | llrepetitive_statementrr | llwith_statementrr,
96.	llempty_statementrr => ,
97.	llassignment_statementrr =>  llvariable_accessrr | llfunction_identifierrr ":=" llexpressionrr,
98.	llgoto_statementrr =>  "goto" lllabelrr,
99.	llconditional_statementrr =>  llif_statementrr | llcase_statementrr,
100.	llrepetitive_statementrr =>  llrepeat_statementrr | llwhile_statementrr | llfor_statementrr,
101.	lllooprr =>  llrepeat_statementrr | llwhile_statementrr | llfor_statementrr,
102.	llwith_statementrr =>  "with" llrecord_variable_listrr "do" llstatementrr,
103.	llif_statementrr =>  "if" llboolean_expressionrr "then" llstatementrr O(llelse_partrr ),
104.	llcase_statementrr =>  "case" llcase_indexrr "of" llcase_list_elementrr #(";" llcase_list_elementrr) O(";") "end",
105.	llrepeat_statementrr =>  "repeat" llstatement_sequencerr "until" llboolean_expressionrr,
106.	llwhile_statementrr =>  "while" llboolean_expressionrr "do" llstatementrr,
107.	llfor_statementrr =>  "for" llcontrol_variablerr ":=" llinitial_valuerr ("to" | "downto") llfinal_valuerr "do" llstatementrr,
108.	llrecord_variable_listrr =>  llrecord_variablerr #("," llrecord_variablerr),
109.	llboolean_expressionrr =>  llexpressionrr,
110.	llelse_partrr =>  "else" llstatementrr,
111.	llcase_indexrr =>  llexpressionrr,
112.	llcase_list_elementrr =>  llcase_constant_listrr ":" llstatementrr,
113.	llcontrol_variablerr =>  llentire_variablerr,
114.	llinitial_valuerr =>  llexpressionrr,
115.	llfinal_valuerr =>  llexpressionrr,
116.	llexpressionrr => llsimple_expressionrr#(llrelational_operatorrrllsimple_expressionrr),
117.	llfunction_identifierrr =>  llidentifierrr,
118.	llentire_variablerr =>  llvariable_identifierrr,
119.	llcomponent_variablerr =>  llindexed_variablerr | llfield_designatorrr,
120.	llidentified_variablerr =>  llpointer_variablerr "^",
121.	llbuffer_variablerr =>  llfile_variablerr "^",
122.	llsimple_expressionrr =>  O(llsignrr) lltermrr #(lladding_operatorrr lltermrr),
123.	llvariable_identifierrr =>  llidentifierrr,
124.	llindexed_variablerr =>  llarray_variablerr "[" O(llindex_expressionrr #("," llindex_expressionrr) ) "]" ,
125.	llfield_designatorrr =>  llrecord_variablerr "." llfield_specifierrr | llfield_designator_identifierrr,
126.	llpointer_variablerr =>  llvariable_accessrr,
127.	lltermrr =>  llfactorrr #(llmultiplying_operatorrr llfactorrr),
128.	llarray_variablerr =>  llvariable_accessrr,
129.	llindex_expressionrr =>  llexpressionrr,
130.	llrecord_variablerr =>  llvariable_accessrr,
131.	llfield_specifierrr =>  llfield_identifierrr,
132.	llfield_designator_identifierrr =>  llidentifierrr,
133.	llfactorrr =>  llvariable_accessrr | llunsigned_constantrr | llfunction_designatorrr | llset_constructorrr | llexpressionrr | "not" llfactorrr, | llbound_identifierrr,
134.	llfield_identifierrr =>  llidentifierrr,
135.	llset_constructorrr =>  O( #(llmember_designatorrr #("," llmember_designatorrr))),
136.	llbound_identifierrr =>  llidentifierrr,
137.	llmember_designatorrr =>  llexpressionrr #(".." llexpressionrr),
138.	llfunction_identificationrr =>  "function" llfunction_identifierrr,
139.	llfunction_designatorrr =>  llfunction_identifierrr O(llactual_parameter_listrr).
